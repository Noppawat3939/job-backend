generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String
  password       String
  role           Role
  active         Boolean?
  firstName      String?
  lastName       String?
  companyName    String?
  industry       String?
  companyProfile String?
  userProfile    String?
  companyHistory String?
  provider       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  AppliedJob     AppliedJob[]
  FavoriteJob    FavoriteJob[]
  UserResume     UserResume?   @relation(fields: [resumeId], references: [id])
  resumeId       Int?
}

model Job {
  id              Int              @id @default(autoincrement())
  active          Boolean?
  position        String
  style           WorkStyle?
  company         String
  industry        String?
  companyProfile  String?
  location        String?
  salary          Int[]
  urgent          Boolean?         @default(false)
  jobDescriptions String[]
  qualifications  String[]
  benefits        String[]
  contracts       String[]
  transports      String[]
  jobStartTime    DateTime?
  jobEndTime      DateTime?
  jobType         JobType?
  province        String?
  category        String?
  experienceLevel ExperienceLevel?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  AppliedJob      AppliedJob[]
  FavoriteJob     FavoriteJob[]

  @@map("job")
}

model AppliedJob {
  id                Int                @id @default(autoincrement())
  userId            Int
  jobId             Int
  applicationDate   DateTime?
  cancelledDate     DateTime?
  offeredDate       DateTime?
  rejectedDate      DateTime?
  applicationStatus ApplicationStatus?
  job               Job                @relation(fields: [jobId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
}

model FavoriteJob {
  id           Int       @id @default(autoincrement())
  userId       Int
  jobId        Int
  favoriteDate DateTime?
  job          Job       @relation(fields: [jobId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
}

model UserResume {
  id            Int            @id @default(autoincrement())
  userId        Int
  templateTitle String
  templateId    Int
  templateData  Json?
  active        Boolean?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User[]
  template      ResumeTemplate @relation(fields: [templateId], references: [id])
}

model Subscription {
  id        Int                @id @default(autoincrement())
  userId    Int
  type      SubscriptionType
  status    SubscriptionStatus @default(pending)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model PaymentTransaction {
  id                     Int               @id @default(autoincrement())
  refNumber              String            @unique
  status                 TransactionStatus @default(pending)
  transactionCompletedAt DateTime?
  stamptUserId           Int?              @unique
  slipImage              String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model ResumeTemplate {
  id              Int          @id @default(autoincrement())
  image           String?
  backgroundColor String?
  titleColor      String?
  subTitileColor  String?
  paragraphColor  String?
  UserResume      UserResume[]
}

enum WorkStyle {
  remote
  work_from_home
  on_site
  hybrid
}

enum Role {
  super_admin
  admin
  employer
  user
}

enum JobType {
  full_time
  past_time
  contract
  internship
}

enum ExperienceLevel {
  entry
  middle
  senior
  no_required
}

enum ApplicationStatus {
  applied
  reviewing
  interviewing
  offering
  offered
  rejected
  cancelled
}

enum SubscriptionType {
  sub_A
  sub_B
  sub_C
}

enum SubscriptionStatus {
  pending
  subscribed
  unsubscribe
}

enum TransactionStatus {
  pending
  completed
  cancelled
}
